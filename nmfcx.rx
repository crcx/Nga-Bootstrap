( Nga Machine Forth Cross Compiler ~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Copyright [c] 2008 - 2016, Charles Childers                 )
( Copyright [c] 2009 - 2010, Luke Parrish                     )
( Copyright [c] 2010,        Marc Simpson                     )
( Copyright [c] 2010,        Jay Skeer                        )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )


reset
devector keymap:handler


( Minimal File I/O ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
1 constant :W
: io     (   n-f )  4 out wait 4 in ;
: open   (  $m-h ) -1 io ;
: write  (  ch-f ) -3 io ;
: close  (   h-f ) -4 io ;
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )


( Assembler ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
24 1024 * constant IMAGE-SIZE

variables| target origin fid |
here [ !target ] [ !origin ] bi IMAGE-SIZE allot

: ,    ( n-  ) @target !+ !target ;
: inst ( n"- ) ` : .data ` , ` ; ;
: instructions ( nn- ) [ dup inst 1 + ] times drop ;

0 27 instructions
  nop, lit, dup, drop, swap, push, pop, jump, call, cjump,
  return, eq, neq, lt, gt, fetch, store, add, sub, mul,
  divmod, and, or, xor, shift, zret, end,

: current  (  -n ) @target @origin - ;
: main:    (  -  ) current @origin 1 + ! ;
: label:   ( "-  ) current constant ;
: jump:    ( "-  ) lit, ' , jump, ;
: cjump:   ( "-  ) lit, ' , cjump, ;
: call:    ( "-  ) lit, ' , call, ;
: #        ( n-  ) lit, , ;
: $,       ( $-  ) withLength [ @+ , ] times 0 , drop ;

: writeByte ( n- )
  %00000000000000000000000011111111 and
  @fid write drop ;

: writeCell ( n- )
       dup writeByte
  8 >> dup writeByte
  8 >> dup writeByte
  8 >>     writeByte ;

: saveImage ( - )
  "ngaImage" :W open !fid
  @origin @target over - [ @+ writeCell ] times drop
  @fid close drop ;
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )


( Machine Forth ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  : cond ( -a ) lit, @target 0 , ;
---reveal---
  : =if  ( -a ) neq, cond ;
  : <if  ( -a ) gt, cond ;
  : >if  ( -a ) lt, cond ;
  : !if  ( -a ) eq, cond ;
  : then ( a- ) current swap ! ;
}}

: repeat (  -a ) current ;
: again  ( a-  ) lit, , jump, ;

: allot     ( n- ) [ 0 , ] times ;
: variable: ( n"- ) label: , ;
: variable  (  "- ) 0 variable: ;
: variables ( n"- ) &variable times ;

: ; ( - ) return, ;; [[
: : ( "- ) label: [ lit, , call, ] reclass ;; [[
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )


( Setup target memory for new image ~~~~~~~~~~~~~~~~~~~~~~~~~ )
lit, 0 , jump,
